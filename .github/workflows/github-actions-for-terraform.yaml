name: 'RunTerraform'
on:
  workflow_dispatch:
    inputs:
      EnvironmentName:
        description: 'Directory name of a enviroment'
        required: true
        default: '(The name of directory under "/envs/")'
      Apply:
        description: 'Specify true if applying, false otherwise'
        required: true
        default: "false"
  push:
    branches:
      - main
    paths:
      - "envs/**"
  pull_request:

jobs:
  detect_dirs:
    name: 'Detect modified enviroment directories'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      BASE_DIR: "projects"
    outputs:
      TARGET_DIR: ${{ steps.detectddir.outputs.TARGET_DIR }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Detect modified project directories
      id: detectddir
      run: |
        echo "::group::Detect directories process"
        TARGET_DIR=""
        # For manual trigger
        if [ "${{ github.event_name }}" == 'workflow_dispatch' ]; then
          TARGET_DIR="[ \"${{ env.BASE_DIR }}/${{ github.event.inputs.EnvironmentName }}\" ]"
        
        # For push
        # Atteintion:
        # - This logic only detects updates to the envs folder.
        # - Note that execution will be omitted in the case of pushing multiple commits directly.
        #   However, in the case of pull req merge, it is not necessary to consider it because it is 1 commit.
        #   (because of checking the difference from the previous commit)
        elif [ "${{ github.event_name }}" == 'push' ]; then
          TARGET_BRANCH="${GITHUB_REF#refs/heads/}"  
          echo "TAGET_BRANCE = ${TARGET_BRANCH}"
          git fetch --depth 2 origin ${TARGET_BRANCH}
          TARGET_DIR=$(git diff HEAD^ HEAD --name-only --diff-filter=ACMRT -- ${{ env.BASE_DIR }} | \
            grep -v '^${{ env.BASE_DIR }}/${{ env.EXCLUDED_DIR }}' | \
            sed 's:\(^${{ env.BASE_DIR }}/[^/]*\)*.*$:\1:'| \
            sort | uniq | \
            jq -scR 'split("\n") | .[:-1]');

        # For pull req
        elif [ "${{ github.event_name }}" == 'pull_request' ]; then
          TARGET_BRANCH="${{ github.base_ref }}"  
          echo "TAGET_BRANCE = ${TARGET_BRANCH}"
          git fetch --depth 1 origin ${TARGET_BRANCH}
          git diff origin/${TARGET_BRANCH} HEAD --name-only
          TARGET_DIR=$(git diff origin/${TARGET_BRANCH} HEAD --name-only --diff-filter=ACMRT -- ${{ env.BASE_DIR }} | \
            grep -v '^${{ env.BASE_DIR }}/${{ env.EXCLUDED_DIR }}' | \
            sed 's:\(^${{ env.BASE_DIR }}/[^/]*\)*.*$:\1:'| \
            sort | uniq | \
            jq -scR 'split("\n") | .[:-1]');
        fi
        echo "::endgroup::"
        # Output results
        echo "::group::Detect directories results"
        echo "TARGET_DIR = ${TARGET_DIR}"
        echo "::endgroup::"
        # End processing
        echo "::set-output name=TARGET_DIR::${TARGET_DIR}"
        exit 0
  
  run_terraform:
    name: 'Run terraform'
    needs: detect_dirs
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        target: ${{fromJson(needs.detect_dirs.outputs.TARGET_DIR)}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.target }}
    env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: Setup AWS credentals
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && ( github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.Apply == 'true') )
        run: terraform apply -auto-approve